{"ast":null,"code":"import { applyMiddleware, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport reducers from '../reducers';\nconst bindMiddleware = middleware => {\n  if (true) {\n    const {\n      composeWithDevTools\n    } = require('redux-devtools-extension');\n    return composeWithDevTools(applyMiddleware(...middleware));\n  }\n  return applyMiddleware(...middleware);\n};\nfunction configureStore(initialState = {}) {\n  return createStore(reducers, initialState, bindMiddleware([thunk]));\n}\nexport default configureStore;","map":{"version":3,"names":["applyMiddleware","createStore","thunk","reducers","bindMiddleware","middleware","composeWithDevTools","require","configureStore","initialState"],"sources":["/home/novel/Desktop/medcario/lms/lms_admin/db-sl-admin/redux/store/index.js"],"sourcesContent":["import {applyMiddleware, createStore} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport reducers from '../reducers';\r\n\r\n\r\nconst bindMiddleware = middleware => {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    const {composeWithDevTools} = require('redux-devtools-extension');\r\n    return composeWithDevTools(applyMiddleware(...middleware));\r\n  }\r\n  return applyMiddleware(...middleware);\r\n};\r\n\r\nfunction configureStore(initialState = {}) {\r\n  return createStore(reducers, initialState, bindMiddleware([thunk]));\r\n}\r\n\r\nexport default configureStore;\r\n"],"mappings":"AAAA,SAAQA,eAAe,EAAEC,WAAW,QAAO,OAAO;AAClD,OAAOC,KAAK,MAAM,aAAa;AAC/B,OAAOC,QAAQ,MAAM,aAAa;AAGlC,MAAMC,cAAc,GAAGC,UAAU,IAAI;EACnC,UAA2C;IACzC,MAAM;MAACC;IAAmB,CAAC,GAAGC,OAAO,CAAC,0BAA0B,CAAC;IACjE,OAAOD,mBAAmB,CAACN,eAAe,CAAC,GAAGK,UAAU,CAAC,CAAC;EAC5D;EACA,OAAOL,eAAe,CAAC,GAAGK,UAAU,CAAC;AACvC,CAAC;AAED,SAASG,cAAcA,CAACC,YAAY,GAAG,CAAC,CAAC,EAAE;EACzC,OAAOR,WAAW,CAACE,QAAQ,EAAEM,YAAY,EAAEL,cAAc,CAAC,CAACF,KAAK,CAAC,CAAC,CAAC;AACrE;AAEA,eAAeM,cAAc"},"metadata":{},"sourceType":"module"}